
'use server';
/**
 * @fileOverview A basic chat flow for user interaction with a simulated admin/social worker.
 *
 * - sendChatMessage - A function that handles processing a user's chat message.
 * - ChatFlowInput - The input type for the sendChatMessage function.
 * - ChatFlowOutput - The return type for the sendChatMessage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ChatFlowInputSchema = z.object({
  userMessage: z.string().describe('The message sent by the user.'),
});
export type ChatFlowInput = z.infer<typeof ChatFlowInputSchema>;

const ChatFlowOutputSchema = z.object({
  aiResponse: z.string().describe('The response generated by the AI assistant.'),
});
export type ChatFlowOutput = z.infer<typeof ChatFlowOutputSchema>;

export async function sendChatMessage(input: ChatFlowInput): Promise<ChatFlowOutput> {
  return chatWithAdminFlow(input);
}

const prompt = ai.definePrompt({
  name: 'chatWithAdminPrompt',
  input: {schema: ChatFlowInputSchema},
  output: {schema: ChatFlowOutputSchema},
  prompt: `You are a friendly and helpful support assistant for the #BeFree platform.
Your role is to act like an admin or social worker.
The user has sent you the following message:
"{{{userMessage}}}"

Respond empathetically and provide assistance if possible.
- If they ask about the forum, you can suggest they browse existing discussions or create a new post if they have something to share or ask.
- If they ask about HIV screening, you can explain its purpose (confidential risk assessment and guidance).
- If they ask about referrals, you can explain that referrals are generated after screenings to connect users with necessary health services.
- If the query is complex, very personal, or requires specific admin action (like moderating a post or urgent help), acknowledge their message and inform them that you will pass it on to a human social worker or admin who will get back to them as soon as possible.
- Keep your responses concise and supportive.

Your response:`,
});

const chatWithAdminFlow = ai.defineFlow(
  {
    name: 'chatWithAdminFlow',
    inputSchema: ChatFlowInputSchema,
    outputSchema: ChatFlowOutputSchema,
  },
  async (input: ChatFlowInput) => {
    const {output} = await prompt(input);
    if (!output) {
      return { aiResponse: "I'm sorry, I wasn't able to generate a response at this moment. Please try again." };
    }
    return output;
  }
);
