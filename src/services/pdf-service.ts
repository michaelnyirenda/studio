// src/services/pdf-service.ts
'use server';

import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { format } from 'date-fns';
import type { Referral } from '@/lib/types';
import type { Timestamp } from 'firebase/firestore';

export async function generateReferralPdf(referral: Referral): Promise<Uint8Array> {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage();
  const { width, height } = page.getSize();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  let y = height - 50;
  const x = 50;
  const line_height = 18;
  const heading_size = 18;
  const body_size = 12;
  const label_size = 10;
  const section_gap = 25;

  const drawText = (text: string, xPos: number, yPos: number, size: number, textFont = font) => {
    page.drawText(text, { x: xPos, y: yPos, size, font: textFont, color: rgb(0.1, 0.1, 0.1) });
  };

  const drawLabelAndValue = (label: string, value: string | undefined | null) => {
    if (value) {
      drawText(`${label}:`, x, y, label_size, boldFont);
      drawText(value, x + 120, y, body_size);
      y -= line_height * 1.5;
    }
  };

  // Header
  drawText('Patient Referral Document', x, y, heading_size, boldFont);
  y -= section_gap * 1.5;

  // Details
  drawLabelAndValue('Patient Name', referral.patientName);
  drawLabelAndValue('Referral Type', referral.type);
  drawLabelAndValue('Status', referral.status);

  const referralDate = (referral.referralDate as Timestamp)?.toDate();
  drawLabelAndValue('Referral Date', referralDate ? format(referralDate, 'PPP') : 'N/A');

  const appointmentDateTime = (referral.appointmentDateTime as Timestamp)?.toDate();
  drawLabelAndValue('Appointment', appointmentDateTime ? format(appointmentDateTime, 'PPP p') : 'Not scheduled');

  const fullLocation = [referral.region, referral.constituency, referral.facility].filter(Boolean).join(', ');
  drawLabelAndValue('Referred To', fullLocation || 'N/A');

  y -= section_gap / 2;
  
  // Referral Message Section
  if (referral.referralMessage) {
    drawText('Referral Reason:', x, y, label_size, boldFont);
    y -= line_height;
    const messageLines = referral.referralMessage.split('\n');
    messageLines.forEach(line => {
      // Basic word wrap
      const words = line.split(' ');
      let currentLine = '';
      for (const word of words) {
        const testLine = currentLine.length > 0 ? `${currentLine} ${word}` : word;
        if (font.widthOfTextAtSize(testLine, body_size) > width - 2 * x) {
          drawText(currentLine, x, y, body_size);
          y -= line_height;
          currentLine = word;
        } else {
          currentLine = testLine;
        }
      }
      drawText(currentLine, x, y, body_size);
      y -= line_height;
    });
    y -= section_gap / 2;
  }

  // Notes Section
  if (referral.notes) {
    drawText('Notes:', x, y, label_size, boldFont);
    y -= line_height;
    const noteLines = referral.notes.split('\n');
     noteLines.forEach(line => {
      const words = line.split(' ');
      let currentLine = '';
      for (const word of words) {
        const testLine = currentLine.length > 0 ? `${currentLine} ${word}` : word;
        if (font.widthOfTextAtSize(testLine, body_size) > width - 2 * x) {
          drawText(currentLine, x, y, body_size);
          y -= line_height;
          currentLine = word;
        } else {
          currentLine = testLine;
        }
      }
      drawText(currentLine, x, y, body_size);
      y -= line_height;
    });
    y -= section_gap / 2;
  }

  // Footer
  const footerText = 'Generated by i-BreakFree Platform';
  drawText(footerText, x, 50, 8);

  return pdfDoc.save();
}
